/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import org.junit.Test;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class QuoteTest {

  @Test public void quoteListExistsTest() throws FileNotFoundException {
    QuotesFinder heresThing  = new QuotesFinder();
    List<Quote> thingToTest = heresThing.createQuoteArray();
    assertNotNull("there should be objects in here.",thingToTest);
  }

  @Test public void quoteCreatedTest(){
    ArrayList<String> intoQuote= new ArrayList<>();
    intoQuote.add("yes");
    Quote testQuote = new Quote(intoQuote, "PVOV", "20", "gotta catch'em all!");
    String whatToTest = testQuote.toString();
    assertEquals("This is the quote.", "From Quote ArrayList\n" +
                                               "Author: PVOV\n" +
                                               "Quote: gotta catch'em" +
                                               " all!", whatToTest);
  }

  @Test public void saveToFileFunctionalityTest() throws IOException {
    QuotesFinder heresThing  = new QuotesFinder();
    List<Quote> quoteArray = heresThing.createQuoteArray();
    Quote lastquote = quoteArray.get(quoteArray.size()-1);
    System.out.println(lastquote);
    QuotesFinder.displayApiQuote();
    QuotesFinder latestQuoteList = new QuotesFinder();
    List<Quote> quoteArrayNew = latestQuoteList.createQuoteArray();
    Quote newLastquote = quoteArrayNew.get(quoteArray.size()-1);
    assertNotSame("These shouldn't be the same", lastquote, newLastquote); // confirms the last item
    // prior to the lastest display quote is different ie something
    // was saved to that slot.
  }

  @Test public void apiPingTest() throws IOException {
    QuotesFinder newQuote = new QuotesFinder();
    String theReturn = (newQuote.returnQuoteFromApi());
    assertEquals("This is the first character.", '{', theReturn.charAt(0));
  }
}

  @Test public void returnAnAuthorTest() throws FileNotFoundException {
    assertNotNull(QuotesFinder.returnQuoteFromAuthor("marilyn"));
    assertNotNull(QuotesFinder.returnQuoteFromAuthor("Marilyn"));
  }

  @Test public void returnAQuoteTest() throws FileNotFoundException {
    assertNotNull(QuotesFinder.returnQuoteWithThatWord("check"));
  }

  @Test public void returnAnApiQuoteTest() throws IOException {
    assertNotNull(QuotesFinder.displayApiQuote());
  }
}